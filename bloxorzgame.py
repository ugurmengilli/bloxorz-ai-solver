"""
Author: Ugur Mengilli

Bloxorz Game implemented as an AI problem
"""
import bloxorzutils
from aima.search import Problem


class BloxorzGame(Problem):
    """
    Implements the game as AI Problem and defines the game rules, internal representations and interfaces for further
    usage of the class.
    """

    @staticmethod
    def decoder_gen(empty='X', safe='O', block='S', goal='G',
                    col_sep=' ', row_sep='\n'):
        """
        Generate a custom/default decoder needed to translate str representation of a map into tiles.
        :param empty: The block cannot go into an empty tile, even partially.
        :param safe: The block can stand on safe tile at any time at any orientation.
        :param block: Denotes the tile(s) occupied by the block.
        :param goal: The block should stand on the goal tile vertically.
        :param col_sep: Separator between the str representation of the tiles in the same row (separates each col).
        :param row_sep: Separator between the str representation of the rows in a map.
        :return: Decoder to be used in initialization of game parameters
        """
        return {empty: 0,
                safe: 1,
                block: 2,
                goal: -1,
                'col_sep': col_sep,
                'row_sep': row_sep
                }

    @staticmethod
    def validate_map(str_map, decoder=None):
        """
        Validate the str map given the decoder. If decoder is not given, default decoder returned by
        BloxorzGame.decoder_gen is used.
        :param str_map: map to be validated.
        :param decoder: decoder to be used in validation. Default decoder is used if not given.
        :return: True if valid, False otherwise.
        """
        return False

    def __init__(self, game_map=None, decoder=None):
        """
        Initialize the game with the given string-represented map. If decoder is not given, default one is used to
        convert the string representation of the map into tiles. If the map does not use the default encoding,
        corresponding decoder should be passed. Custom decoders can be generated using BloxorzGame.get_decoder.
        If map is not given, game is initialized with empty parameters. Then, init_board should be used to finish
        the initialization of Problem parameters.
        :param game_map: rectangular, str map corresponding to the encoding generated by BloxorzGame.get_decoder.
        :param decoder: generated by BloxorzGame.get_decoder.
        """
        self._map = None
        self._decoder = decoder if decoder else BloxorzGame.decoder_gen()

        # Initial and goal states of the problem. Set to None by default. Problem already defines the class variables...
        problem_parameters = (None, None)
        if game_map:    # init Problem parameters and _map. Validity of the map will be checked in init_map.
            problem_parameters = self.init_map(game_map, self._decoder)

        Problem.__init__(self, *problem_parameters)

    def actions(self, state):
        pass

    def init_map(self, str_map, decoder=None):
        """
        Given a valid map where the validity can be checked using BloxorzGame.validate_map, determine the initial
        state and the goal.
        :param str_map: rectangular, str map corresponding to the encoding generated by BloxorzGame.get_decoder.
        :param decoder: generated by BloxorzGame.get_decoder.
        :return: Initial state of the block, goal state
        """
        return None, None

    def result(self, state, action):
        pass

    def value(self, state):
        pass
